import {PropsType} from '../../__types__';
import * as Colors from '@brightlayer-ui/colors';

export const sharedPropsConfig: PropsType[] = [
  {
    propName: 'activeItemBackgroundColor',
    inputType: 'colorPicker',
    inputValue: Colors.blue[50],
    propType: 'string',
    helperText: `Background color for the 'active' item`,
    required: false,
  },
  {
    propName: 'activeItemBackgroundShape',
    inputType: 'select',
    inputValue: 'square',
    options: ['round', 'square'],
    propType: 'string',
    helperText: 'Shape of the active item background highlight',
    required: false,
    defaultValue: 'square',
  },
  {
    propName: 'activeItemFontColor',
    inputType: 'colorPicker',
    inputValue: Colors.blue[500],
    propType: 'string',
    helperText: `Font color for the 'active' item`,
    required: false,
  },
  {
    propName: 'activeItemIconColor',
    inputType: 'colorPicker',
    inputValue: Colors.blue[500],
    propType: 'string',
    helperText: `Icon color for the 'active' item`,
    required: false,
  },
  {
    propName: 'chevron',
    inputType: 'boolean',
    inputValue: false,
    propType: 'boolean',
    helperText: 'Whether to have chevrons for all menu items',
    required: false,
    defaultValue: false,
  },
  {
    propName: 'chevronColor',
    inputType: 'colorPicker',
    inputValue: Colors.gray[500],
    propType: 'string',
    helperText: 'Color override for the chevron icon',
    required: false,
  },
  {
    propName: 'collapseIcon',
    inputType: 'select',
    inputValue: 'undefined',
    options: ['undefined', '<Remove />', '<AddAPhoto />'],
    propType: 'JSX.Element',
    helperText: 'Icon used to collapse drawer',
    required: false,
    defaultValue: 'undefined',
  },
  {
    propName: 'disableActiveItemParentStyles',
    inputType: 'boolean',
    inputValue: false,
    propType: 'boolean',
    helperText:
      'If true, NavItems will not have a bold title when a child NavItem is selected',
    required: false,
    defaultValue: false,
  },
  {
    propName: 'divider',
    inputType: 'boolean',
    inputValue: false,
    propType: 'boolean',
    helperText: 'Whether to show a line between non-nested items',
    required: false,
    defaultValue: false,
  },
  {
    propName: 'expandIcon',
    inputType: 'select',
    inputValue: 'undefined',
    options: ['undefined', '<Add />', '<PinDrop />'],
    propType: 'JSX.Element',
    helperText: 'Icon used to expand drawer',
    required: false,
    defaultValue: 'undefined',
  },
  {
    propName: 'hidePadding',
    inputType: 'boolean',
    inputValue: false,
    propType: 'boolean',
    helperText: 'Whether to hide the paddings reserved for menu item icons',
    required: false,
    defaultValue: false,
  },
  {
    propName: 'itemFontColor',
    inputType: 'colorPicker',
    inputValue: Colors.black[500],
    propType: 'string',
    helperText: 'The color used for the item text',
    required: false,
  },
  {
    propName: 'itemIconColor',
    inputType: 'colorPicker',
    inputValue: Colors.black[500],
    propType: 'string',
    helperText: 'The color used for the icon',
    required: false,
  },
  {
    propName: 'nestedBackgroundColor',
    inputType: 'colorPicker',
    inputValue: Colors.white[200],
    propType: 'string',
    helperText: 'Background color for nested menu items',
    required: false,
  },
  {
    propName: 'nestedDivider',
    inputType: 'boolean',
    inputValue: false,
    propType: 'boolean',
    helperText: 'Whether to show a line between nested menu items',
    required: false,
    defaultValue: false,
  },
  {
    propName: 'ripple',
    inputType: 'boolean',
    inputValue: true,
    propType: 'boolean',
    helperText: 'Whether to apply material ripple effect to items on click',
    required: false,
    defaultValue: true,
  },
];

export default sharedPropsConfig;
